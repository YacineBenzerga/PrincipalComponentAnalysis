"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

Object.defineProperty(exports, "__esModule", { value: true });
var server_1 = require("./server");
var path = require("path");
var fs = require("fs");
var swig = require("swig");
function renderFile(template, data) {
    return swig.render(fs.readFileSync(template).toString(), {
        filename: template,
        autoescape: false,
        locals: data
    });
}
exports.renderFile = renderFile;
function treeLeaf(obj, leafRule) {
    var objKey = Object.keys(obj)[0];
    var leaf = obj[objKey];
    var children = [];
    var rules = Object.keys(leaf);
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
        for (var _iterator = rules[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var rule = _step.value;

            if (_typeof(leaf[rule]) === 'object') {
                children.push(treeLeaf(leaf[rule], rule));
                continue;
            }
            children.push({
                name: leaf[rule],
                rule: rule
            });
        }
    } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
    } finally {
        try {
            if (!_iteratorNormalCompletion && _iterator.return) {
                _iterator.return();
            }
        } finally {
            if (_didIteratorError) {
                throw _iteratorError;
            }
        }
    }

    return {
        name: objKey,
        rule: leafRule,
        children: [].concat(children)
    };
}
function drawDT(tree, _ref) {
    var _ref$width = _ref.width,
        width = _ref$width === undefined ? 600 : _ref$width,
        _ref$height = _ref.height,
        height = _ref$height === undefined ? 400 : _ref$height;

    var firstStr = Object.keys(tree)[0];
    var obj = treeLeaf(tree, null);
    var html = renderFile(path.resolve(__dirname, 'DT', 'tpl.html'), {
        width: width,
        height: height,
        data: JSON.stringify(obj)
    });
    server_1.default(html);
}
exports.drawDT = drawDT;
function drawkNN(dataSet_, labels_, inx) {
    var _ref2 = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {},
        _ref2$width = _ref2.width,
        width = _ref2$width === undefined ? "600px" : _ref2$width,
        _ref2$height = _ref2.height,
        height = _ref2$height === undefined ? "400px" : _ref2$height,
        _ref2$size = _ref2.size,
        size = _ref2$size === undefined ? 20 : _ref2$size;

    var dataSet = [].concat(_toConsumableArray(dataSet_));
    var labels = [].concat(_toConsumableArray(labels_));
    var data = [];
    var classes = [].concat(_toConsumableArray(new Set(labels))).filter(function (v) {
        return v !== undefined;
    });
    classes.forEach(function (c) {
        var classSet = dataSet.filter(function (value, i) {
            return labels[i] === c;
        });
        data.push([].concat(_toConsumableArray(classSet)));
    });
    classes.push('test');
    data.push([inx]);
    var html = renderFile(path.resolve(__dirname, 'kNN', 'tpl.html'), {
        title: "Scatter plot for kNN",
        width: width,
        height: height,
        size: size,
        data: JSON.stringify(data),
        classes: JSON.stringify(classes.map(function (v) {
            return v.toString();
        }))
    });
    server_1.default(html);
}
exports.drawkNN = drawkNN;
function drawLogistic(dataSet_, labels_, weights) {
    var _ref3 = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {},
        _ref3$width = _ref3.width,
        width = _ref3$width === undefined ? "600px" : _ref3$width,
        _ref3$height = _ref3.height,
        height = _ref3$height === undefined ? "400px" : _ref3$height,
        _ref3$size = _ref3.size,
        size = _ref3$size === undefined ? 20 : _ref3$size;

    var dataSet = [].concat(_toConsumableArray(dataSet_));
    var labels = [].concat(_toConsumableArray(labels_));
    var data = [];
    var classes = [].concat(_toConsumableArray(new Set(labels))).filter(function (v) {
        return v !== undefined;
    });
    classes.forEach(function (c) {
        var classSet = dataSet.filter(function (value, i) {
            return labels[i] === c;
        });
        data.push([].concat(_toConsumableArray(classSet)));
    });
    var xs = dataSet.map(function (v) {
        return v[0];
    }),
        minx = Math.min.apply(Math, _toConsumableArray(xs)),
        maxx = Math.max.apply(Math, _toConsumableArray(xs));
    var k = -weights[1] / weights[2];
    var b = -weights[0] / weights[2];
    var linePoints = [[minx, k * minx + b], [maxx, k * maxx + b]];
    var html = renderFile(path.resolve(__dirname, 'logistic', 'tpl.html'), {
        title: "Logistic Regression",
        width: width,
        height: height,
        size: size,
        data: JSON.stringify(data),
        classes: JSON.stringify(classes.map(function (v) {
            return v.toString();
        })),
        linePoints: JSON.stringify(linePoints)
    });
    server_1.default(html);
}
exports.drawLogistic = drawLogistic;
//# sourceMappingURL=../../maps/utils/charts/index.js.map
