"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

Object.defineProperty(exports, "__esModule", { value: true });
var fs = require("fs");
var _ = require("lodash");
function parseFile(filePath) {
    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
        _ref$toNumber = _ref.toNumber,
        toNumber = _ref$toNumber === undefined ? false : _ref$toNumber,
        _ref$delimiter = _ref.delimiter,
        delimiter = _ref$delimiter === undefined ? '\t' : _ref$delimiter;

    var content = fs.readFileSync(filePath, { encoding: 'utf-8' });
    var lines = content.split('\n');
    var result = lines.map(function (line) {
        return line.split(delimiter);
    });
    if (toNumber) {
        return result.map(function (v) {
            return v.map(function (c) {
                return Number(c);
            });
        });
    }
    return result;
}
exports.parseFile = parseFile;

var CSV = function () {
    function CSV(headerLine, datasWithoutIndex) {
        _classCallCheck(this, CSV);

        this.headerLine = headerLine;
        this.values = datasWithoutIndex;
    }

    _createClass(CSV, [{
        key: "getHeader",
        value: function getHeader() {
            return this.headerLine;
        }
    }, {
        key: "drop",
        value: function drop(label) {
            var headerLine = [].concat(_toConsumableArray(this.headerLine));
            var values = this.values.map(function (v) {
                return [].concat(_toConsumableArray(v));
            });
            var labelIndex = typeof label === 'string' ? headerLine.indexOf(label) : label;
            if (headerLine.length !== 0) {
                headerLine.splice(labelIndex, 1);
            }
            values.forEach(function (v) {
                return v.splice(labelIndex, 1);
            });
            return new CSV(headerLine, values);
        }
    }, {
        key: "getClasses",
        value: function getClasses() {
            return this.values.map(function (v) {
                return v[v.length - 1];
            });
        }
    }]);

    return CSV;
}();

exports.CSV = CSV;
function read_csv(filePath) {
    var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
        _ref2$index_col = _ref2.index_col,
        index_col = _ref2$index_col === undefined ? false : _ref2$index_col,
        _ref2$delimiter = _ref2.delimiter,
        delimiter = _ref2$delimiter === undefined ? ',' : _ref2$delimiter,
        _ref2$header = _ref2.header,
        header = _ref2$header === undefined ? 0 : _ref2$header,
        _ref2$dataType = _ref2.dataType,
        dataType = _ref2$dataType === undefined ? 'number' : _ref2$dataType,
        _ref2$classType = _ref2.classType,
        classType = _ref2$classType === undefined ? 'number' : _ref2$classType;

    var rawContent = fs.readFileSync(filePath, { encoding: 'utf-8' });
    var lines = rawContent.split('\n').map(function (v) {
        return v.split(delimiter);
    });
    var headerLine = void 0;
    if (Array.isArray(header)) {
        headerLine = header;
    } else if (header === 0) {
        headerLine = lines[0];
        lines = _.tail(lines);
    } else {
        headerLine = [];
    }
    if (headerLine[0] === '') {
        headerLine = _.tail(headerLine);
    }
    var datasWithoutIndex = [];
    if (index_col !== false) {
        datasWithoutIndex = lines.map(function (v) {
            return _.tail(v);
        });
    } else {
        datasWithoutIndex = lines;
    }
    if (dataType === 'number') {
        datasWithoutIndex = datasWithoutIndex.map(function (row) {
            return row.map(function (col) {
                if (classType === 'number') {
                    return Number(col);
                }
                return col;
            });
        });
    }
    return new CSV(headerLine, datasWithoutIndex);
}
exports.read_csv = read_csv;
function write_csv(filePath, data) {
    var _ref3 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},
        _ref3$index = _ref3.index,
        index = _ref3$index === undefined ? false : _ref3$index,
        _ref3$header = _ref3.header,
        header = _ref3$header === undefined ? [] : _ref3$header,
        _ref3$delimiter = _ref3.delimiter,
        delimiter = _ref3$delimiter === undefined ? ',' : _ref3$delimiter;

    var dataToWrite = [].concat(_toConsumableArray(data));
    if (index !== false) {
        dataToWrite.forEach(function (v, i) {
            v.unshift(i);
        });
    }
    if (Array.isArray(header) && header.length >= 1) {
        dataToWrite.unshift(header);
    }
    dataToWrite = dataToWrite.map(function (row) {
        return row.map(function (col) {
            return col.toString();
        });
    });
    var contentToWrite = '';
    dataToWrite.forEach(function (v) {
        contentToWrite += v.join(delimiter);
        contentToWrite += '\n';
    });
    fs.writeFileSync(filePath, contentToWrite, {
        encoding: 'utf-8'
    });
}
exports.write_csv = write_csv;
//# sourceMappingURL=../../maps/utils/fileParser/index.js.map
