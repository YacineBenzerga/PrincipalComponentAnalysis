"use strict";

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

Object.defineProperty(exports, "__esModule", { value: true });
var index_1 = require("../matrix/index");
var index_2 = require("../vector/index");
var immutable_1 = require("immutable");
function standardScaler(dataSet) {
    var mdataset = new index_1.default(dataSet);
    var transSet = mdataset.transpose();
    var setAvgs = mdataset.calAvg(0);
    var result = transSet.map(function (v, i) {
        var vlength = v.length;
        return v.map(function (col) {
            return Math.pow(col - setAvgs[i], 2) / vlength;
        });
    });
    return new index_1.default(result).transpose();
}
exports.standardScaler = standardScaler;
function normalize(dataSet_) {
    var _index_1$default;

    var dataSet = new index_1.default(dataSet_);
    var minVals = dataSet.min(0);
    var maxVals = dataSet.max(0);
    var ranges = new index_2.default(maxVals).zipWith(function (a, b) {
        return a - b;
    }, new index_2.default(minVals));
    var normalDataSet = new index_1.default((_index_1$default = index_1.default).zeros.apply(_index_1$default, _toConsumableArray(dataSet.size())));
    var setSize = dataSet.size()[0];
    normalDataSet = dataSet.sub(new index_1.default(immutable_1.Repeat(minVals, setSize).toArray()));
    normalDataSet = normalDataSet.divide(new index_1.default(immutable_1.Repeat(ranges, setSize).toArray()));
    return normalDataSet.arr;
}
exports.normalize = normalize;
function binarizer(dataSet, threshold) {
    var mdataset = new index_1.default(dataSet);
    var transSet = mdataset.transpose();
    var result = transSet.map(function (v, i) {
        return v.map(function (c) {
            return c > threshold[i] ? 1 : 0;
        });
    });
    return result;
}
exports.binarizer = binarizer;
function oneHotEncoder(dataSet) {}
exports.oneHotEncoder = oneHotEncoder;
//# sourceMappingURL=../../maps/utils/features/preprocessing.js.map
