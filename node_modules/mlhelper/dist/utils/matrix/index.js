"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

Object.defineProperty(exports, "__esModule", { value: true });
var math = require("mathjs");
var _ = require("lodash");

var Matrix = function () {
    function Matrix(arr) {
        _classCallCheck(this, Matrix);

        this.arr = arr;
    }

    _createClass(Matrix, [{
        key: "toArray",
        value: function toArray() {
            return this.arr;
        }
    }, {
        key: "zipWith",
        value: function zipWith(arrA, arrB, operator) {
            var result = [];
            switch (operator) {
                case '+':
                    result = _.zipWith(arrA, arrB, function (a, b) {
                        return _.zipWith(a, b, function (m, n) {
                            return m + n;
                        });
                    });
                    break;
                case '-':
                    result = _.zipWith(arrA, arrB, function (a, b) {
                        return _.zipWith(a, b, function (m, n) {
                            return m - n;
                        });
                    });
                    break;
                case '*':
                    result = _.zipWith(arrA, arrB, function (a, b) {
                        return _.zipWith(a, b, function (m, n) {
                            return m * n;
                        });
                    });
                    break;
                case '/':
                    result = _.zipWith(arrA, arrB, function (a, b) {
                        return _.zipWith(a, b, function (m, n) {
                            return m / n;
                        });
                    });
                    break;
                default:
                    return;
            }
            return new Matrix(result);
        }
    }, {
        key: "sub",
        value: function sub(toSub) {
            return this.zipWith(this.arr, toSub.arr, '-');
        }
    }, {
        key: "add",
        value: function add(toAdd) {
            return this.zipWith(this.arr, toAdd.arr, '+');
        }
    }, {
        key: "mult",
        value: function mult(toMult) {
            return this.zipWith(this.arr, toMult.arr, '*');
        }
    }, {
        key: "divide",
        value: function divide(toDivide) {
            return this.zipWith(this.arr, toDivide.arr, '/');
        }
    }, {
        key: "size",
        value: function size() {
            return [this.arr.length, this.arr[0].length];
        }
    }, {
        key: "sum",
        value: function sum() {
            var axis = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;

            if (axis === 0) {
                return this.transpose().map(function (v) {
                    return _.sum(v);
                });
            }
            return this.arr.map(function (v) {
                return _.sum(v);
            });
        }
    }, {
        key: "min",
        value: function min() {
            var axis = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

            var arr = axis === 0 ? this.transpose() : [].concat(_toConsumableArray(this.arr));
            arr = arr.map(function (v) {
                return v.filter(function (c) {
                    return typeof c === 'number';
                });
            });
            return arr.map(function (v) {
                return _.min(v);
            });
        }
    }, {
        key: "max",
        value: function max() {
            var axis = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

            var arr = axis === 0 ? this.transpose() : [].concat(_toConsumableArray(this.arr));
            arr = arr.map(function (v) {
                return v.filter(function (c) {
                    return typeof c === 'number';
                });
            });
            return arr.map(function (v) {
                return _.max(v);
            });
        }
    }, {
        key: "transpose",
        value: function transpose() {
            return math.transpose(this.arr);
        }
    }, {
        key: "calAvg",
        value: function calAvg() {
            var flag = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

            var arr = flag === 0 ? this.transpose() : this.arr;
            return arr.map(function (v, i) {
                var sum = v.reduce(function (pre, cur) {
                    return pre + cur;
                }, 0);
                return sum / v.length;
            });
        }
    }], [{
        key: "zeros",
        value: function zeros(r, c) {
            return c ? math.zeros(r, c)._data : math.zeros(r)._data;
        }
    }, {
        key: "ones",
        value: function ones(m, n) {
            return n ? math.ones(m, n)._data : math.ones(m)._data;
        }
    }, {
        key: "mean",
        value: function mean(arr) {
            var axis = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

            if (axis === 0) {
                return math.transpose(arr).map(function (v) {
                    return _.sum(v) / v.length;
                });
            } else {
                return arr.map(function (v) {
                    return _.sum(v) / v.length;
                });
            }
        }
    }]);

    return Matrix;
}();

exports.default = Matrix;
//# sourceMappingURL=../../maps/utils/matrix/index.js.map
