"use strict";

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

Object.defineProperty(exports, "__esModule", { value: true });
var index_1 = require("../../utils/matrix/index");
var index_2 = require("../../utils/vector/index");
var _ = require("lodash");

var AdaBoost = function () {
    function AdaBoost(dataSet, labels) {
        var numInt = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 40;

        _classCallCheck(this, AdaBoost);

        this.dataSet = dataSet;
        this.labels = labels;
        this.numInt = numInt;
    }

    _createClass(AdaBoost, [{
        key: "stumpClassify",
        value: function stumpClassify(dataMatrix, dimen, threshVal, flag) {
            var m = dataMatrix.size()[0];
            var retArray = index_1.default.ones(m);
            if (flag === 'lt') {
                retArray = retArray.map(function (v, i) {
                    return dataMatrix.arr[i][dimen] <= threshVal ? -1.0 : 1.0;
                });
            } else {
                retArray = retArray.map(function (v, i) {
                    return dataMatrix.arr[i][dimen] > threshVal ? -1.0 : 1.0;
                });
            }
            return retArray;
        }
    }, {
        key: "buildStump",
        value: function buildStump(D) {
            var dataSetMat = new index_1.default(this.dataSet);
            var labels = this.labels;

            var _dataSetMat$size = dataSetMat.size(),
                _dataSetMat$size2 = _slicedToArray(_dataSetMat$size, 2),
                m = _dataSetMat$size2[0],
                n = _dataSetMat$size2[1];

            var numSteps = 10.0,
                bestStump = {},
                bestClassEst = index_1.default.ones(m),
                minError = Infinity;
            var that = this;
            for (var i = 0; i < n; i++) {
                var rangeMin = dataSetMat.min()[i],
                    rangeMax = dataSetMat.max()[i];
                var stepSize = (rangeMax - rangeMin) / numSteps;
                for (var j = 0; j < numSteps; j++) {
                    var _loop = function _loop(flag) {
                        var threshVal = rangeMin + j * stepSize;
                        var predictedVals = that.stumpClassify(dataSetMat, i, threshVal, flag);
                        var errArr = index_1.default.ones(m);
                        errArr = errArr.map(function (v, i) {
                            return predictedVals[i] === labels[i] ? 0 : 1;
                        });
                        var weightedError = _.sum(_.zipWith(errArr, D, function (a, b) {
                            return a * b;
                        }));
                        if (weightedError < minError) {
                            minError = weightedError;
                            bestClassEst = [].concat(_toConsumableArray(predictedVals));
                            bestStump = {
                                dim: i,
                                thresh: threshVal,
                                ineq: flag
                            };
                        }
                    };

                    var _arr = ['lt', 'gt'];

                    for (var _i = 0; _i < _arr.length; _i++) {
                        var flag = _arr[_i];
                        _loop(flag);
                    }
                }
            }
            return [bestStump, minError, bestClassEst];
        }
    }, {
        key: "adaBoostTrainDS",
        value: function adaBoostTrainDS() {
            var _this = this;

            var numInt = this.numInt,
                dataMatrix = new index_1.default(this.dataSet),
                labels = this.labels,
                weakClassArr = [];
            var m = dataMatrix.size()[0],
                D = index_1.default.ones(m).map(function (v) {
                return v / m;
            });
            var aggClassEst = index_1.default.zeros(m);

            var _loop2 = function _loop2(i) {
                var _buildStump = _this.buildStump(D),
                    _buildStump2 = _slicedToArray(_buildStump, 3),
                    bestStump = _buildStump2[0],
                    error = _buildStump2[1],
                    classEst = _buildStump2[2];

                var alpha = 0.5 * Math.log((1.0 - error) / Math.max(error, 1e-16));
                bestStump['alpha'] = alpha;
                weakClassArr.push(bestStump);
                var expon = _.zipWith(labels, classEst, function (a, b) {
                    return a * b;
                }).map(function (v) {
                    return -1 * alpha * v;
                });
                D = _.zipWith(D, expon, function (a, b) {
                    return a * Math.exp(b);
                });
                var Dsum = _.sum(D);
                D = D.map(function (v) {
                    return v / Dsum;
                });
                var alphaClassEst = classEst.map(function (v) {
                    return v * alpha;
                });
                aggClassEst = _.zipWith(alphaClassEst, aggClassEst, function (a, b) {
                    return a + b;
                });
                var realAggClassEst = index_2.default.sign(aggClassEst);
                var aggErrors = _.zipWith(_.zipWith(realAggClassEst, labels, function (a, b) {
                    return a === b ? 0 : 1;
                }), index_1.default.ones(m), function (a, b) {
                    return a * b;
                });
                var errorRate = _.sum(aggErrors) / m;
                if (errorRate === 0.0) {
                    return "break";
                }
            };

            for (var i = 0; i < numInt; i++) {
                var _ret2 = _loop2(i);

                if (_ret2 === "break") break;
            }
            return weakClassArr;
        }
    }, {
        key: "classify",
        value: function classify(inx) {
            var _this2 = this;

            var dataMatrix = new index_1.default(inx);
            var m = dataMatrix.size()[0];
            var aggClassEst = index_1.default.zeros(m);
            var classifierArr = this.adaBoostTrainDS();
            classifierArr.forEach(function (v, i) {
                var classEst = _this2.stumpClassify(dataMatrix, v['dim'], v['thresh'], v['ineq']);
                aggClassEst = _.zipWith(classEst.map(function (value) {
                    return value * v['alpha'];
                }), aggClassEst, function (a, b) {
                    return a + b;
                });
            });
            return index_2.default.sign(aggClassEst);
        }
    }]);

    return AdaBoost;
}();

exports.default = AdaBoost;
//# sourceMappingURL=../../maps/algorithm/AdaBoost/index.js.map
