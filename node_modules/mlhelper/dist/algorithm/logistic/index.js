"use strict";

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

Object.defineProperty(exports, "__esModule", { value: true });
var matrix_1 = require("../../utils/matrix");
var _ = require("lodash");
function sigmoid(inx) {
    return 1.0 / (1 + Math.exp(-inx));
}

var Logistic = function () {
    function Logistic(dataMatIn_, classLabels, numIter) {
        _classCallCheck(this, Logistic);

        var dataMatIn = [].concat(_toConsumableArray(dataMatIn_));
        dataMatIn = dataMatIn.map(function (v) {
            return [1.0, v[0], v[1]];
        });
        this.dataMatrix = new matrix_1.default(dataMatIn);
        this.labels = classLabels;
        this.numIter = numIter;
    }

    _createClass(Logistic, [{
        key: "getWeights",
        value: function getWeights() {
            var dataMatrix = this.dataMatrix.arr;
            var labels = this.labels;

            var _dataMatrix$size = this.dataMatrix.size(),
                _dataMatrix$size2 = _slicedToArray(_dataMatrix$size, 2),
                m = _dataMatrix$size2[0],
                n = _dataMatrix$size2[1];

            var weights = matrix_1.default.ones(n);
            var indexArr = void 0;
            var alpha = void 0;
            for (var i = 0; i < this.numIter; i++) {
                indexArr = _.range(m);

                var _loop = function _loop(j) {
                    alpha = 4 / (1.0 + j + i) + 0.0001;
                    var randomIndex = _.random(0, indexArr.length - 1);
                    var vec = _.zipWith(dataMatrix[randomIndex], weights, function (a, b) {
                        return a * b;
                    });
                    var h = sigmoid(_.sum(vec));
                    var error = labels[randomIndex] - h;
                    var rised = dataMatrix[randomIndex].map(function (v) {
                        return v * alpha * error;
                    });
                    weights = _.zipWith(weights, rised, function (a, b) {
                        return a + b;
                    });
                    indexArr.splice(randomIndex, 1);
                };

                for (var j = 0; j < m; j++) {
                    _loop(j);
                }
            }
            return weights;
        }
    }, {
        key: "classify",
        value: function classify(inX_) {
            var inX = [].concat(_toConsumableArray(inX_));
            inX = [1.0, inX[0], inX[1]];
            var weights = this.getWeights();
            var vec = _.zipWith(inX, weights, function (a, b) {
                return a * b;
            });
            var prob = sigmoid(_.sum(vec));
            return prob > 0.5 ? 1.0 : 0.0;
        }
    }]);

    return Logistic;
}();

exports.default = Logistic;
//# sourceMappingURL=../../maps/algorithm/logistic/index.js.map
