"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

Object.defineProperty(exports, "__esModule", { value: true });
var fs = require("fs");
var immutable_1 = require("immutable");
function calShannoEnt(dataSet) {
    var numEntries = dataSet.length;
    var labelCounts = {};
    dataSet.forEach(function (v) {
        var label = v[v.length - 1];
        if (label in labelCounts) {
            return labelCounts[label] += 1;
        }
        labelCounts[label] = 1;
    });
    var shannoEnt = 0.0;
    for (var label in labelCounts) {
        var prob = labelCounts[label] / numEntries;
        shannoEnt -= prob * Math.log2(prob);
    }
    return shannoEnt;
}
function splitDataSet(dataSet, axis, value) {
    var retDataSet = dataSet.reduce(function (pre, cur) {
        var curList = immutable_1.List(cur);
        if (cur[axis] === value) {
            pre.push(curList.splice(axis, 1).toArray());
        }
        return pre;
    }, []);
    return retDataSet;
}
function chooseBestLabelToSplit(dataSet) {
    var numLables = dataSet[0].length - 1,
        baseEntropy = calShannoEnt(dataSet),
        bestInfoGain = 0.0,
        bestLabel = -1;

    var _loop = function _loop(i) {
        var featList = dataSet.map(function (v) {
            return v[i];
        }),
            uniqueVals = [].concat(_toConsumableArray(new Set(featList))),
            newEntropy = 0.0;
        uniqueVals.forEach(function (v, index) {
            var subDataSet = splitDataSet(dataSet, i, v),
                prob = subDataSet.length / dataSet.length;
            newEntropy += prob * calShannoEnt(subDataSet);
        });
        var infoGain = baseEntropy - newEntropy;
        if (infoGain > bestInfoGain) {
            bestInfoGain = infoGain;
            bestLabel = i;
        }
    };

    for (var i = 0; i < numLables; i++) {
        _loop(i);
    }
    return bestLabel;
}
function majorityCnt(classList) {
    var classCount = {};
    classList.forEach(function (v, i) {
        if (v in classCount) {
            return classCount[v] += 1;
        }
        classCount[v] = 1;
    });
    var sortedClassCount = Object.keys(classCount).sort(function (a, b) {
        return classCount[b] - classCount[a];
    });
    return sortedClassCount[0];
}
function createTree(dataSet, labels) {
    var classList = dataSet.map(function (v) {
        return v[v.length - 1];
    }),
        uniqueClasses = [].concat(_toConsumableArray(new Set(classList))).length;
    if (uniqueClasses === 1) {
        return classList[0];
    }
    if (dataSet[0].length === 1) {
        return majorityCnt(classList);
    }
    var bestFeat = chooseBestLabelToSplit(dataSet),
        bestFeatLabel = labels[bestFeat];
    var resultTree = _defineProperty({}, bestFeatLabel, {});
    labels.splice(bestFeat, 1);
    var featValues = dataSet.map(function (v) {
        return v[bestFeat];
    }),
        uniqueVals = [].concat(_toConsumableArray(new Set(featValues)));
    uniqueVals.forEach(function (v) {
        var subLabels = [].concat(_toConsumableArray(labels)),
            subDataSet = splitDataSet(dataSet, bestFeat, v);
        resultTree[bestFeatLabel][v] = createTree(subDataSet, subLabels);
    });
    return resultTree;
}
function _classify(inputTree, featLabels, testVec) {
    var firstStr = Object.keys(inputTree)[0],
        secondDict = inputTree[firstStr],
        featIndex = featLabels.indexOf(firstStr);
    var resultClass = void 0;
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
        for (var _iterator = Object.keys(secondDict)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var key = _step.value;

            if (testVec[featIndex] === key) {
                if (_typeof(secondDict[key]) === 'object') {
                    resultClass = _classify(secondDict[key], featLabels, testVec);
                } else {
                    resultClass = secondDict[key];
                    break;
                }
            }
        }
    } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
    } finally {
        try {
            if (!_iteratorNormalCompletion && _iterator.return) {
                _iterator.return();
            }
        } finally {
            if (_didIteratorError) {
                throw _iteratorError;
            }
        }
    }

    return resultClass;
}

var DT = function () {
    function DT(dataSet, labels) {
        var alg = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "ID3";

        _classCallCheck(this, DT);

        this.dataSet = dataSet;
        this.labels = labels;
        this.tree = createTree(dataSet, [].concat(_toConsumableArray(labels)));
    }

    _createClass(DT, [{
        key: "getTree",
        value: function getTree() {
            return this.tree;
        }
    }, {
        key: "classify",
        value: function classify(featLabels, testVec) {
            return _classify(this.tree, featLabels, testVec);
        }
    }, {
        key: "storeTree",
        value: function storeTree(filePath) {
            var jsonTree = JSON.stringify(this.tree);
            return new Promise(function (resolve, reject) {
                fs.writeFile(filePath, jsonTree, function (err) {
                    if (err) {
                        return reject(err);
                    }
                    resolve();
                });
            });
        }
    }], [{
        key: "classifyFromTree",
        value: function classifyFromTree(inputTree, featLabels, testVec) {
            return _classify(inputTree, featLabels, testVec);
        }
    }]);

    return DT;
}();

exports.default = DT;
//# sourceMappingURL=../../maps/algorithm/DT/index.js.map
