"use strict";

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

Object.defineProperty(exports, "__esModule", { value: true });
var index_1 = require("../../utils/matrix/index");
var index_2 = require("../../utils/vector/index");
var immutable_1 = require("immutable");
function _autoNormal(dataSet) {
    var _index_1$default;

    var minVals = dataSet.min(0);
    var maxVals = dataSet.max(0);
    var ranges = new index_2.default(maxVals).zipWith(function (a, b) {
        return a - b;
    }, new index_2.default(minVals));
    var normalDataSet = new index_1.default((_index_1$default = index_1.default).zeros.apply(_index_1$default, _toConsumableArray(dataSet.size())));
    var setSize = dataSet.size()[0];
    normalDataSet = dataSet.sub(new index_1.default(immutable_1.Repeat(minVals, setSize).toArray()));
    normalDataSet = normalDataSet.divide(new index_1.default(immutable_1.Repeat(ranges, setSize).toArray()));
    return [normalDataSet.arr, ranges, minVals];
}

var kNN = function () {
    function kNN(dataSet, labels) {
        _classCallCheck(this, kNN);

        var _autoNormal2 = _autoNormal(new index_1.default(dataSet)),
            _autoNormal3 = _slicedToArray(_autoNormal2, 3),
            normalDataSet = _autoNormal3[0],
            ranges = _autoNormal3[1],
            minVals = _autoNormal3[2];

        this.dataSet = new index_1.default(normalDataSet);
        this.labels = new index_2.default(labels);
        this.ranges = ranges;
        this.minVals = minVals;
    }

    _createClass(kNN, [{
        key: "classify",
        value: function classify(inx_, k) {
            var setSize = this.dataSet.size()[0];
            if (k > setSize) {
                k = setSize;
            }
            var inx = this.autoNormalVector(inx_);
            var diffMat = new index_1.default(immutable_1.Repeat(inx, setSize).toArray()).sub(this.dataSet);
            var sqDiffMat = diffMat.mult(diffMat);
            var sqDistances = sqDiffMat.sum(1);
            var distances = sqDistances.map(Math.sqrt);
            var sortedDistanceIndicies = new index_2.default(distances).argSort();
            var classCount = {};
            for (var i = 0; i < k; i++) {
                var voteIlable = this.labels.arr[sortedDistanceIndicies[i]];
                if (classCount[voteIlable]) {
                    classCount[voteIlable] += 1;
                } else {
                    classCount[voteIlable] = 1;
                }
            }
            var sortedClassCount = Object.keys(classCount).sort(function (a, b) {
                return classCount[b] - classCount[a];
            });
            return sortedClassCount[0];
        }
    }, {
        key: "autoNormalVector",
        value: function autoNormalVector(inx_) {
            var inx = [].concat(_toConsumableArray(inx_));
            var minVals = this.minVals,
                ranges = this.ranges;
            inx = new index_2.default(inx).zipWith(function (a, b) {
                return a - b;
            }, new index_2.default(minVals));
            inx = new index_2.default(inx).zipWith(function (a, b) {
                return a / b;
            }, new index_2.default(ranges));
            return inx;
        }
    }], [{
        key: "autoNormal",
        value: function autoNormal(dataSet) {
            return _autoNormal(new index_1.default(dataSet))[0];
        }
    }]);

    return kNN;
}();

exports.default = kNN;
//# sourceMappingURL=../../maps/algorithm/kNN/index.js.map
